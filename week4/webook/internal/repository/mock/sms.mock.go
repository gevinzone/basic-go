// Code generated by MockGen. DO NOT EDIT.
// Source: ./sms.go

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	context "context"
	reflect "reflect"

	domain "github.com/gevinzone/basic-go/week4/webook/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSmsRepository is a mock of SmsRepository interface.
type MockSmsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSmsRepositoryMockRecorder
}

// MockSmsRepositoryMockRecorder is the mock recorder for MockSmsRepository.
type MockSmsRepositoryMockRecorder struct {
	mock *MockSmsRepository
}

// NewMockSmsRepository creates a new mock instance.
func NewMockSmsRepository(ctrl *gomock.Controller) *MockSmsRepository {
	mock := &MockSmsRepository{ctrl: ctrl}
	mock.recorder = &MockSmsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsRepository) EXPECT() *MockSmsRepositoryMockRecorder {
	return m.recorder
}

// GetFirst mocks base method.
func (m *MockSmsRepository) GetFirst(ctx context.Context) (domain.Sms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirst", ctx)
	ret0, _ := ret[0].(domain.Sms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirst indicates an expected call of GetFirst.
func (mr *MockSmsRepositoryMockRecorder) GetFirst(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirst", reflect.TypeOf((*MockSmsRepository)(nil).GetFirst), ctx)
}

// SaveSms mocks base method.
func (m *MockSmsRepository) SaveSms(ctx context.Context, sms domain.Sms) (domain.Sms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSms", ctx, sms)
	ret0, _ := ret[0].(domain.Sms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSms indicates an expected call of SaveSms.
func (mr *MockSmsRepositoryMockRecorder) SaveSms(ctx, sms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSms", reflect.TypeOf((*MockSmsRepository)(nil).SaveSms), ctx, sms)
}

// UpdateStatusAsProcessFailed mocks base method.
func (m *MockSmsRepository) UpdateStatusAsProcessFailed(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAsProcessFailed", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusAsProcessFailed indicates an expected call of UpdateStatusAsProcessFailed.
func (mr *MockSmsRepositoryMockRecorder) UpdateStatusAsProcessFailed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAsProcessFailed", reflect.TypeOf((*MockSmsRepository)(nil).UpdateStatusAsProcessFailed), ctx, id)
}

// UpdateStatusAsProcessed mocks base method.
func (m *MockSmsRepository) UpdateStatusAsProcessed(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAsProcessed", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusAsProcessed indicates an expected call of UpdateStatusAsProcessed.
func (mr *MockSmsRepositoryMockRecorder) UpdateStatusAsProcessed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAsProcessed", reflect.TypeOf((*MockSmsRepository)(nil).UpdateStatusAsProcessed), ctx, id)
}
